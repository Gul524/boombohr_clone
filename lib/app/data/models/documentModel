enum DocumentType { file, folder }

class DocumentsTab {
  bool isPermanent;
  List<DocumentItem> items;

  DocumentsTab({
    this.isPermanent = false,
    this.items = const [],
  });

  factory DocumentsTab.fromJson(Map<String, dynamic> json) {
    return DocumentsTab(
      isPermanent: json['isPermanent'] ?? false,
      items: (json['items'] as List<dynamic>? ?? [])
          .map((e) => DocumentItem.fromJson(e))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'isPermanent': isPermanent,
      'items': items.map((e) => e.toJson()).toList(),
    };
  }
}

class DocumentItem {
  String name;
  DocumentType type;
  bool isPermanent;
  String? fileUrl; // only for files
  List<DocumentItem>? children; // only for folders

  DocumentItem({
    required this.name,
    required this.type,
    this.isPermanent = false,
    this.fileUrl,
    this.children,
  });

  factory DocumentItem.fromJson(Map<String, dynamic> json) {
    return DocumentItem(
      name: json['name'] ?? '',
      type: DocumentType.values.firstWhere(
        (e) => e.toString().split('.').last == (json['type'] ?? 'file'),
        orElse: () => DocumentType.file,
      ),
      isPermanent: json['isPermanent'] ?? false,
      fileUrl: json['fileUrl'],
      children: (json['children'] as List<dynamic>?)
          ?.map((e) => DocumentItem.fromJson(e))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'name': name,
      'type': type.toString().split('.').last,
      'isPermanent': isPermanent,
      if (fileUrl != null) 'fileUrl': fileUrl,
      if (children != null)
        'children': children!.map((e) => e.toJson()).toList(),
    };
  }
}
